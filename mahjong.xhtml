<?xml version='1.0'?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg"  xmlns:xlink="http://www.w3.org/1999/xlink">
<head>
<script type='text/javascript'>
<![CDATA[

var SVGNS = "http://www.w3.org/2000/svg";

var svgdoc = null;
var svgwin = null;

var global_id = 0;

function Tile(name) {
    this.name = name;
    this.id = global_id++;
    this.create_dom_elem();
}

Tile.prototype.dom_ref = null;
Tile.prototype.name = null;

Tile.prototype.create_dom_elem = function() {
    console.log('create elem '+this.name);
    var u = document.createElementNS(SVGNS, "use");
    var t = svgdoc.getElementById(this.name);
    var bb = t.getBBox();
    u.setAttribute('x', -bb.x);
    u.setAttribute('y', -bb.y);
    u.setAttributeNS("http://www.w3.org/1999/xlink", "href", 'traditional.svg#'+this.name);
    this.dom_ref = u;
    return u;
}

function Board() {
};

Board.prototype.defs = new Array(
    'TILE_1',
    'TILE_1_SEL',
    'TILE_2',
    'TILE_2_SEL',
    'TILE_3',
    'TILE_3_SEL',
    'TILE_4',
    'TILE_4_SEL'
);

Board.prototype.tiles = new Array(
        'CHARACTER_1', 
        'CHARACTER_2', 
        'CHARACTER_3', 
        'CHARACTER_4', 
        'CHARACTER_5',
        'CHARACTER_6',
        'CHARACTER_7',
        'CHARACTER_8',
        'CHARACTER_9',
        'ROD_1',
        'ROD_2',
        'ROD_3',
        'ROD_4',
        'ROD_5',
        'ROD_6',
        'ROD_7',
        'ROD_8',
        'ROD_9',
        'BAMBOO_1',
        'BAMBOO_2',
        'BAMBOO_3',
        'BAMBOO_4',
        'BAMBOO_5',
        'BAMBOO_6',
        'BAMBOO_7',
        'BAMBOO_8',
        'BAMBOO_9',
        'SEASON_1',
        'SEASON_2',
        'SEASON_3',
        'SEASON_4',
        'DRAGON_1',
        'DRAGON_2',
        'DRAGON_3',
        'FLOWER_1',
        'FLOWER_2',
        'FLOWER_3',
        'FLOWER_4',
        'WIND_1',
        'WIND_2',
        'WIND_3',
        'WIND_4'
    );

Board.prototype.dom_board = null;
Board.prototype.board = Array();

Board.prototype.tile_height = 89;
Board.prototype.tile_width = 69;

Board.prototype.height = 8;
Board.prototype.width = 18;

Board.prototype.get_tile_by_name = function(name) {
    return new Tile(name);

    var u = this.create_use();
    var t = svgdoc.getElementById(name);
    var bb = t.getBBox();
    u.setAttribute('x', -bb.x);
    u.setAttribute('y', -bb.y);
    u.setAttributeNS("http://www.w3.org/1999/xlink", "href", 'traditional.svg#'+name);
    return u;
}

Board.prototype.get_tile_pair = function(tile_name) {
    return Array(this.get_tile_by_name(tile_name), this.get_tile_by_name(tile_name));
}

Board.prototype.get_random_tile_name = function() {
    var randpos = Math.floor(Math.random()*this.tiles.length);
    console.log(randpos);
    return this.tiles[randpos];
}

Board.prototype.positon_is_free = function() {
    return true;
}

Board.prototype.get_random_free_position = function() {
    while (1) {
        var rand_x = Math.floor(Math.random()*this.width);
        var rand_y = Math.floor(Math.random()*this.height);
        console.log(rand_x+' '+rand_y);
        // XXX: do it more intelligently
        if (this.board[rand_y][rand_x] === null) {
            return Array(rand_x, rand_y);
        }
    }
}

Board.prototype.translate_to_position = function(elem, x, y) {
    console.log('translate:'+x+' '+y);
    elem.setAttribute('transform', 'translate('+x+', '+y+')');
}

Board.prototype.position_tile = function(t) {
    var coords = this.get_random_free_position();
    this.board[coords[1]][coords[0]] = t;
    this.translate_to_position(t.dom_ref, coords[0]*this.tile_width, coords[1]*this.tile_height);
    this.dom_board.appendChild(t.dom_ref);
}

Board.prototype.init = function() {
    var i, tlen;
    var x=0, y=0;

    for (var i=0; i<this.height; i++) {
        var tmp_ar = Array();
        for (var j=0; j<this.width; j++) {
            tmp_ar.push(null);
        }
        this.board.push(tmp_ar);
    }
    this.empty_positions = this.height * this.width;

    this.dom_board = document.getElementById('hgameboard');
    var element_pairs = (this.height*this.width)/2;
    for (i=0; i<element_pairs; i++) {
        var rtile = this.get_random_tile_name();
        console.log('random tile '+rtile);
        var tp = this.get_tile_pair(rtile);
        console.log('positioning '+tp);
        this.position_tile(tp[0]);
        this.position_tile(tp[1]);
        console.log('positioning done');
    }
}

Board.prototype.get_def = function () {
    return d;
}

Board.prototype.create_use = function () {
    use = document.createElementNS(SVGNS, "use");
    return use;
}

Board.prototype.get_bg = function () {
    var background = svgdoc.getElementById('TILE_2').cloneNode(true);
    return background;
}

function init() {
  // see http://w3.org/TR/SVG11/struct.html#InterfaceGetSVGDocument
  var embed = document.getElementById('tileset');
  try {
    svgdoc = embed.getSVGDocument();
  } catch(exception) {
    alert('getSVGDocument interface not available. Try some other browser.');
  }
  
  if (svgdoc && svgdoc.defaultView) {
    svgwin = svgdoc.defaultView; 
  }

  b = new Board();
  b.init();
}

]]>
</script>
</head>
<body onload="javascript:init();">

<embed id="tileset" src="traditional.svg" width="0" height="0" type="image/svg+xml"></embed>

<!-- viewBox="0 0 100 100"  -->
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 800 800" style="width:100%; height:100%; position:absolute; top:0; left:0; z-index:-1;" id="hgameboard">
  <defs id="bg_elems"></defs>
</svg>

</body>
</html>
